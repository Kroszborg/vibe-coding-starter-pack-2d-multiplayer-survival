---
description: Guide for implementing recurring scheduled tasks using SpacetimeDB reducers and timer tables.
globs: 
alwaysApply: false
---
 # SpacetimeDB Scheduled Reducer Implementation Guide

This rule outlines the steps for creating new scheduled reducers in the Rust backend, following the established pattern.

## Steps:

1.  **Define Schedule Table:**
    *   In the relevant module (e.g., `server/src/my_feature.rs`), define a new struct for the schedule table.
    *   It **must** have a primary key `id` of type `u64` (annotated with `#[primary_key]` and `#[auto_inc]`).
    *   It **must** have a field named `scheduled_at` of type `spacetimedb::spacetimedb_lib::ScheduleAt`.
    *   Link this table to the reducer function using the `scheduled(...)` attribute in the `#[spacetimedb::table]` macro.
    *   Note: The `public` attribute is usually not needed for schedule tables.

    ```rust
    use spacetimedb::spacetimedb_lib::ScheduleAt;
    use spacetimedb::{spacetimedb, Table};

    // Removed 'public' as it's typically not needed
    #[spacetimedb::table(name = my_task_schedule, scheduled(my_reducer_function))]
    #[derive(Clone)]
    pub struct MyTaskSchedule {
        #[primary_key]
        #[auto_inc]
        pub id: u64, // MUST be u64 for scheduled tables
        pub scheduled_at: ScheduleAt,
    }
    ```


2.  **Define Reducer Function:**
    *   In the same module, define the function that will be executed on schedule.
    *   Annotate it with `#[spacetimedb::reducer]`.
    *   The function signature should take `ctx: &ReducerContext` and the schedule table row type (e.g., `_schedule: MyTaskSchedule`).
    *   Return `Result<(), String>`.

    ```rust
    use spacetimedb::{spacetimedb, ReducerContext};
    // Import the schedule table type defined above
    use crate::my_feature::MyTaskSchedule;

    #[spacetimedb::reducer]
    pub fn my_reducer_function(ctx: &ReducerContext, _schedule: MyTaskSchedule) -> Result<(), String> {
        log::info!("Scheduled task running at {:?}", ctx.timestamp);
        // ... implement logic using ctx.db, ctx.timestamp ...
        Ok(())
    }
    ```

3.  **Create Initialization Helper:**
    *   In the same module, create a `pub(crate)` helper function (e.g., `init_my_task_schedule`) to insert the initial schedule row.
    *   This function takes `ctx: &ReducerContext`.
    *   Check if the schedule table is empty before inserting.
    *   Use `ScheduleAt::Interval(Duration::from_secs(INTERVAL_SECS).into())` for recurring tasks.

    ```rust
    use spacetimedb::{ReducerContext, Table};
    use spacetimedb::spacetimedb_lib::ScheduleAt;
    use std::time::Duration;
    use log;
    // Import the schedule table type
    use crate::my_feature::MyTaskSchedule;

    const MY_TASK_INTERVAL_SECS: u64 = 60; // Example: Run every minute

    pub(crate) fn init_my_task_schedule(ctx: &ReducerContext) -> Result<(), String> {
        let schedule_table = ctx.db.my_task_schedule(); // Assumes generated trait exists
        if schedule_table.iter().count() == 0 {
            log::info!("Starting my task schedule (every {}s).", MY_TASK_INTERVAL_SECS);
            let interval = Duration::from_secs(MY_TASK_INTERVAL_SECS);
            schedule_table.insert(MyTaskSchedule {
                id: 0, // Auto-incremented
                scheduled_at: ScheduleAt::Interval(interval.into()),
            }); // Note: insert returns the row, not Result
        } else {
            log::debug!("My task schedule already exists.");
        }
        Ok(())
    }
    ```

4.  **Call Init Helper from `lib.rs`:**
    *   Import the generated schedule table trait into `lib.rs` (e.g., `use crate::my_feature::my_task_schedule as MyTaskScheduleTableTrait;`).
    *   Call the initialization helper function (e.g., `crate::my_feature::init_my_task_schedule(ctx)?;`) from within the `init_module` reducer in `lib.rs`.

    ```rust
    // In lib.rs
    use crate::my_feature::my_task_schedule as MyTaskScheduleTableTrait;

    #[spacetimedb::reducer(init)]
    pub fn init_module(ctx: &ReducerContext) -> Result<(), String> {
        // ... other init logic ...
        crate::my_feature::init_my_task_schedule(ctx)?;
        // ...
        Ok(())
    }
    ```

5.  **Imports:** Ensure necessary imports like `Duration`, `ScheduleAt`, `ReducerContext`, `Table`, `log`, and the schedule table struct itself are present in the relevant files.

By following these steps, new scheduled tasks can be added consistently to the project.
