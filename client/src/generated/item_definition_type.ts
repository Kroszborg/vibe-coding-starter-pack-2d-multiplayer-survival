// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { ItemCategory as __ItemCategory } from "./item_category_type";

export type ItemDefinition = {
  id: bigint,
  name: string,
  description: string,
  category: __ItemCategory,
  iconAssetName: string,
  damage: number | undefined,
  isStackable: boolean,
  stackSize: number,
  isEquippable: boolean,
};

/**
 * A namespace for generated helper functions.
 */
export namespace ItemDefinition {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU64Type()),
      new ProductTypeElement("name", AlgebraicType.createStringType()),
      new ProductTypeElement("description", AlgebraicType.createStringType()),
      new ProductTypeElement("category", __ItemCategory.getTypeScriptAlgebraicType()),
      new ProductTypeElement("iconAssetName", AlgebraicType.createStringType()),
      new ProductTypeElement("damage", AlgebraicType.createOptionType(AlgebraicType.createU32Type())),
      new ProductTypeElement("isStackable", AlgebraicType.createBoolType()),
      new ProductTypeElement("stackSize", AlgebraicType.createU32Type()),
      new ProductTypeElement("isEquippable", AlgebraicType.createBoolType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: ItemDefinition): void {
    ItemDefinition.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): ItemDefinition {
    return ItemDefinition.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


