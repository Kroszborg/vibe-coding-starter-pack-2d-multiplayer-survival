// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddFuelToCampfire } from "./add_fuel_to_campfire_reducer.ts";
export { AddFuelToCampfire };
import { AddWoodToFirstAvailableCampfireSlot } from "./add_wood_to_first_available_campfire_slot_reducer.ts";
export { AddWoodToFirstAvailableCampfireSlot };
import { CheckCampfireFuelConsumption } from "./check_campfire_fuel_consumption_reducer.ts";
export { CheckCampfireFuelConsumption };
import { CheckResourceRespawns } from "./check_resource_respawns_reducer.ts";
export { CheckResourceRespawns };
import { ConsumeItem } from "./consume_item_reducer.ts";
export { ConsumeItem };
import { DespawnExpiredItems } from "./despawn_expired_items_reducer.ts";
export { DespawnExpiredItems };
import { DropItem } from "./drop_item_reducer.ts";
export { DropItem };
import { EquipArmor } from "./equip_armor_reducer.ts";
export { EquipArmor };
import { EquipArmorFromDrag } from "./equip_armor_from_drag_reducer.ts";
export { EquipArmorFromDrag };
import { EquipItem } from "./equip_item_reducer.ts";
export { EquipItem };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { InteractWithCampfire } from "./interact_with_campfire_reducer.ts";
export { InteractWithCampfire };
import { InteractWithMushroom } from "./interact_with_mushroom_reducer.ts";
export { InteractWithMushroom };
import { Jump } from "./jump_reducer.ts";
export { Jump };
import { MoveFuelWithinCampfire } from "./move_fuel_within_campfire_reducer.ts";
export { MoveFuelWithinCampfire };
import { MoveItemToHotbar } from "./move_item_to_hotbar_reducer.ts";
export { MoveItemToHotbar };
import { MoveItemToInventory } from "./move_item_to_inventory_reducer.ts";
export { MoveItemToInventory };
import { MoveToFirstAvailableHotbarSlot } from "./move_to_first_available_hotbar_slot_reducer.ts";
export { MoveToFirstAvailableHotbarSlot };
import { PickupDroppedItem } from "./pickup_dropped_item_reducer.ts";
export { PickupDroppedItem };
import { PlaceCampfire } from "./place_campfire_reducer.ts";
export { PlaceCampfire };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { RemoveFuelFromCampfire } from "./remove_fuel_from_campfire_reducer.ts";
export { RemoveFuelFromCampfire };
import { RequestRespawn } from "./request_respawn_reducer.ts";
export { RequestRespawn };
import { SeedEnvironment } from "./seed_environment_reducer.ts";
export { SeedEnvironment };
import { SeedItems } from "./seed_items_reducer.ts";
export { SeedItems };
import { SeedWorldState } from "./seed_world_state_reducer.ts";
export { SeedWorldState };
import { SetSprinting } from "./set_sprinting_reducer.ts";
export { SetSprinting };
import { SplitStack } from "./split_stack_reducer.ts";
export { SplitStack };
import { SplitStackFromCampfire } from "./split_stack_from_campfire_reducer.ts";
export { SplitStackFromCampfire };
import { SplitStackIntoCampfire } from "./split_stack_into_campfire_reducer.ts";
export { SplitStackIntoCampfire };
import { SplitStackWithinCampfire } from "./split_stack_within_campfire_reducer.ts";
export { SplitStackWithinCampfire };
import { TickWorldState } from "./tick_world_state_reducer.ts";
export { TickWorldState };
import { ToggleCampfireBurning } from "./toggle_campfire_burning_reducer.ts";
export { ToggleCampfireBurning };
import { UnequipItem } from "./unequip_item_reducer.ts";
export { UnequipItem };
import { UpdatePlayerPosition } from "./update_player_position_reducer.ts";
export { UpdatePlayerPosition };
import { UseEquippedItem } from "./use_equipped_item_reducer.ts";
export { UseEquippedItem };

// Import and reexport all table handle types
import { ActiveEquipmentTableHandle } from "./active_equipment_table.ts";
export { ActiveEquipmentTableHandle };
import { CampfireTableHandle } from "./campfire_table.ts";
export { CampfireTableHandle };
import { CampfireFuelCheckScheduleTableHandle } from "./campfire_fuel_check_schedule_table.ts";
export { CampfireFuelCheckScheduleTableHandle };
import { DroppedItemTableHandle } from "./dropped_item_table.ts";
export { DroppedItemTableHandle };
import { DroppedItemDespawnScheduleTableHandle } from "./dropped_item_despawn_schedule_table.ts";
export { DroppedItemDespawnScheduleTableHandle };
import { InventoryItemTableHandle } from "./inventory_item_table.ts";
export { InventoryItemTableHandle };
import { ItemDefinitionTableHandle } from "./item_definition_table.ts";
export { ItemDefinitionTableHandle };
import { MushroomTableHandle } from "./mushroom_table.ts";
export { MushroomTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { StoneTableHandle } from "./stone_table.ts";
export { StoneTableHandle };
import { TreeTableHandle } from "./tree_table.ts";
export { TreeTableHandle };
import { WorldStateTableHandle } from "./world_state_table.ts";
export { WorldStateTableHandle };

// Import and reexport all types
import { ActiveEquipment } from "./active_equipment_type.ts";
export { ActiveEquipment };
import { Campfire } from "./campfire_type.ts";
export { Campfire };
import { CampfireFuelCheckSchedule } from "./campfire_fuel_check_schedule_type.ts";
export { CampfireFuelCheckSchedule };
import { DroppedItem } from "./dropped_item_type.ts";
export { DroppedItem };
import { DroppedItemDespawnSchedule } from "./dropped_item_despawn_schedule_type.ts";
export { DroppedItemDespawnSchedule };
import { EquipmentSlot } from "./equipment_slot_type.ts";
export { EquipmentSlot };
import { InventoryItem } from "./inventory_item_type.ts";
export { InventoryItem };
import { ItemCategory } from "./item_category_type.ts";
export { ItemCategory };
import { ItemDefinition } from "./item_definition_type.ts";
export { ItemDefinition };
import { Mushroom } from "./mushroom_type.ts";
export { Mushroom };
import { Player } from "./player_type.ts";
export { Player };
import { Stone } from "./stone_type.ts";
export { Stone };
import { TimeOfDay } from "./time_of_day_type.ts";
export { TimeOfDay };
import { Tree } from "./tree_type.ts";
export { Tree };
import { TreeType } from "./tree_type_type.ts";
export { TreeType };
import { WorldState } from "./world_state_type.ts";
export { WorldState };

const REMOTE_MODULE = {
  tables: {
    active_equipment: {
      tableName: "active_equipment",
      rowType: ActiveEquipment.getTypeScriptAlgebraicType(),
      primaryKey: "playerIdentity",
    },
    campfire: {
      tableName: "campfire",
      rowType: Campfire.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    campfire_fuel_check_schedule: {
      tableName: "campfire_fuel_check_schedule",
      rowType: CampfireFuelCheckSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    dropped_item: {
      tableName: "dropped_item",
      rowType: DroppedItem.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    dropped_item_despawn_schedule: {
      tableName: "dropped_item_despawn_schedule",
      rowType: DroppedItemDespawnSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    inventory_item: {
      tableName: "inventory_item",
      rowType: InventoryItem.getTypeScriptAlgebraicType(),
      primaryKey: "instanceId",
    },
    item_definition: {
      tableName: "item_definition",
      rowType: ItemDefinition.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    mushroom: {
      tableName: "mushroom",
      rowType: Mushroom.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    stone: {
      tableName: "stone",
      rowType: Stone.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    tree: {
      tableName: "tree",
      rowType: Tree.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    world_state: {
      tableName: "world_state",
      rowType: WorldState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    add_fuel_to_campfire: {
      reducerName: "add_fuel_to_campfire",
      argsType: AddFuelToCampfire.getTypeScriptAlgebraicType(),
    },
    add_wood_to_first_available_campfire_slot: {
      reducerName: "add_wood_to_first_available_campfire_slot",
      argsType: AddWoodToFirstAvailableCampfireSlot.getTypeScriptAlgebraicType(),
    },
    check_campfire_fuel_consumption: {
      reducerName: "check_campfire_fuel_consumption",
      argsType: CheckCampfireFuelConsumption.getTypeScriptAlgebraicType(),
    },
    check_resource_respawns: {
      reducerName: "check_resource_respawns",
      argsType: CheckResourceRespawns.getTypeScriptAlgebraicType(),
    },
    consume_item: {
      reducerName: "consume_item",
      argsType: ConsumeItem.getTypeScriptAlgebraicType(),
    },
    despawn_expired_items: {
      reducerName: "despawn_expired_items",
      argsType: DespawnExpiredItems.getTypeScriptAlgebraicType(),
    },
    drop_item: {
      reducerName: "drop_item",
      argsType: DropItem.getTypeScriptAlgebraicType(),
    },
    equip_armor: {
      reducerName: "equip_armor",
      argsType: EquipArmor.getTypeScriptAlgebraicType(),
    },
    equip_armor_from_drag: {
      reducerName: "equip_armor_from_drag",
      argsType: EquipArmorFromDrag.getTypeScriptAlgebraicType(),
    },
    equip_item: {
      reducerName: "equip_item",
      argsType: EquipItem.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    interact_with_campfire: {
      reducerName: "interact_with_campfire",
      argsType: InteractWithCampfire.getTypeScriptAlgebraicType(),
    },
    interact_with_mushroom: {
      reducerName: "interact_with_mushroom",
      argsType: InteractWithMushroom.getTypeScriptAlgebraicType(),
    },
    jump: {
      reducerName: "jump",
      argsType: Jump.getTypeScriptAlgebraicType(),
    },
    move_fuel_within_campfire: {
      reducerName: "move_fuel_within_campfire",
      argsType: MoveFuelWithinCampfire.getTypeScriptAlgebraicType(),
    },
    move_item_to_hotbar: {
      reducerName: "move_item_to_hotbar",
      argsType: MoveItemToHotbar.getTypeScriptAlgebraicType(),
    },
    move_item_to_inventory: {
      reducerName: "move_item_to_inventory",
      argsType: MoveItemToInventory.getTypeScriptAlgebraicType(),
    },
    move_to_first_available_hotbar_slot: {
      reducerName: "move_to_first_available_hotbar_slot",
      argsType: MoveToFirstAvailableHotbarSlot.getTypeScriptAlgebraicType(),
    },
    pickup_dropped_item: {
      reducerName: "pickup_dropped_item",
      argsType: PickupDroppedItem.getTypeScriptAlgebraicType(),
    },
    place_campfire: {
      reducerName: "place_campfire",
      argsType: PlaceCampfire.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    remove_fuel_from_campfire: {
      reducerName: "remove_fuel_from_campfire",
      argsType: RemoveFuelFromCampfire.getTypeScriptAlgebraicType(),
    },
    request_respawn: {
      reducerName: "request_respawn",
      argsType: RequestRespawn.getTypeScriptAlgebraicType(),
    },
    seed_environment: {
      reducerName: "seed_environment",
      argsType: SeedEnvironment.getTypeScriptAlgebraicType(),
    },
    seed_items: {
      reducerName: "seed_items",
      argsType: SeedItems.getTypeScriptAlgebraicType(),
    },
    seed_world_state: {
      reducerName: "seed_world_state",
      argsType: SeedWorldState.getTypeScriptAlgebraicType(),
    },
    set_sprinting: {
      reducerName: "set_sprinting",
      argsType: SetSprinting.getTypeScriptAlgebraicType(),
    },
    split_stack: {
      reducerName: "split_stack",
      argsType: SplitStack.getTypeScriptAlgebraicType(),
    },
    split_stack_from_campfire: {
      reducerName: "split_stack_from_campfire",
      argsType: SplitStackFromCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack_into_campfire: {
      reducerName: "split_stack_into_campfire",
      argsType: SplitStackIntoCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack_within_campfire: {
      reducerName: "split_stack_within_campfire",
      argsType: SplitStackWithinCampfire.getTypeScriptAlgebraicType(),
    },
    tick_world_state: {
      reducerName: "tick_world_state",
      argsType: TickWorldState.getTypeScriptAlgebraicType(),
    },
    toggle_campfire_burning: {
      reducerName: "toggle_campfire_burning",
      argsType: ToggleCampfireBurning.getTypeScriptAlgebraicType(),
    },
    unequip_item: {
      reducerName: "unequip_item",
      argsType: UnequipItem.getTypeScriptAlgebraicType(),
    },
    update_player_position: {
      reducerName: "update_player_position",
      argsType: UpdatePlayerPosition.getTypeScriptAlgebraicType(),
    },
    use_equipped_item: {
      reducerName: "use_equipped_item",
      argsType: UseEquippedItem.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddFuelToCampfire", args: AddFuelToCampfire }
| { name: "AddWoodToFirstAvailableCampfireSlot", args: AddWoodToFirstAvailableCampfireSlot }
| { name: "CheckCampfireFuelConsumption", args: CheckCampfireFuelConsumption }
| { name: "CheckResourceRespawns", args: CheckResourceRespawns }
| { name: "ConsumeItem", args: ConsumeItem }
| { name: "DespawnExpiredItems", args: DespawnExpiredItems }
| { name: "DropItem", args: DropItem }
| { name: "EquipArmor", args: EquipArmor }
| { name: "EquipArmorFromDrag", args: EquipArmorFromDrag }
| { name: "EquipItem", args: EquipItem }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "InteractWithCampfire", args: InteractWithCampfire }
| { name: "InteractWithMushroom", args: InteractWithMushroom }
| { name: "Jump", args: Jump }
| { name: "MoveFuelWithinCampfire", args: MoveFuelWithinCampfire }
| { name: "MoveItemToHotbar", args: MoveItemToHotbar }
| { name: "MoveItemToInventory", args: MoveItemToInventory }
| { name: "MoveToFirstAvailableHotbarSlot", args: MoveToFirstAvailableHotbarSlot }
| { name: "PickupDroppedItem", args: PickupDroppedItem }
| { name: "PlaceCampfire", args: PlaceCampfire }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "RemoveFuelFromCampfire", args: RemoveFuelFromCampfire }
| { name: "RequestRespawn", args: RequestRespawn }
| { name: "SeedEnvironment", args: SeedEnvironment }
| { name: "SeedItems", args: SeedItems }
| { name: "SeedWorldState", args: SeedWorldState }
| { name: "SetSprinting", args: SetSprinting }
| { name: "SplitStack", args: SplitStack }
| { name: "SplitStackFromCampfire", args: SplitStackFromCampfire }
| { name: "SplitStackIntoCampfire", args: SplitStackIntoCampfire }
| { name: "SplitStackWithinCampfire", args: SplitStackWithinCampfire }
| { name: "TickWorldState", args: TickWorldState }
| { name: "ToggleCampfireBurning", args: ToggleCampfireBurning }
| { name: "UnequipItem", args: UnequipItem }
| { name: "UpdatePlayerPosition", args: UpdatePlayerPosition }
| { name: "UseEquippedItem", args: UseEquippedItem }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addFuelToCampfire(campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) {
    const __args = { campfireId, targetSlotIndex, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    AddFuelToCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_fuel_to_campfire", __argsBuffer, this.setCallReducerFlags.addFuelToCampfireFlags);
  }

  onAddFuelToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("add_fuel_to_campfire", callback);
  }

  removeOnAddFuelToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("add_fuel_to_campfire", callback);
  }

  addWoodToFirstAvailableCampfireSlot(campfireId: number, itemInstanceId: bigint) {
    const __args = { campfireId, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    AddWoodToFirstAvailableCampfireSlot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_wood_to_first_available_campfire_slot", __argsBuffer, this.setCallReducerFlags.addWoodToFirstAvailableCampfireSlotFlags);
  }

  onAddWoodToFirstAvailableCampfireSlot(callback: (ctx: ReducerEventContext, campfireId: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("add_wood_to_first_available_campfire_slot", callback);
  }

  removeOnAddWoodToFirstAvailableCampfireSlot(callback: (ctx: ReducerEventContext, campfireId: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("add_wood_to_first_available_campfire_slot", callback);
  }

  checkCampfireFuelConsumption(schedule: CampfireFuelCheckSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    CheckCampfireFuelConsumption.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_campfire_fuel_consumption", __argsBuffer, this.setCallReducerFlags.checkCampfireFuelConsumptionFlags);
  }

  onCheckCampfireFuelConsumption(callback: (ctx: ReducerEventContext, schedule: CampfireFuelCheckSchedule) => void) {
    this.connection.onReducer("check_campfire_fuel_consumption", callback);
  }

  removeOnCheckCampfireFuelConsumption(callback: (ctx: ReducerEventContext, schedule: CampfireFuelCheckSchedule) => void) {
    this.connection.offReducer("check_campfire_fuel_consumption", callback);
  }

  checkResourceRespawns() {
    this.connection.callReducer("check_resource_respawns", new Uint8Array(0), this.setCallReducerFlags.checkResourceRespawnsFlags);
  }

  onCheckResourceRespawns(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("check_resource_respawns", callback);
  }

  removeOnCheckResourceRespawns(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("check_resource_respawns", callback);
  }

  consumeItem(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    ConsumeItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("consume_item", __argsBuffer, this.setCallReducerFlags.consumeItemFlags);
  }

  onConsumeItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("consume_item", callback);
  }

  removeOnConsumeItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("consume_item", callback);
  }

  despawnExpiredItems(schedule: DroppedItemDespawnSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    DespawnExpiredItems.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("despawn_expired_items", __argsBuffer, this.setCallReducerFlags.despawnExpiredItemsFlags);
  }

  onDespawnExpiredItems(callback: (ctx: ReducerEventContext, schedule: DroppedItemDespawnSchedule) => void) {
    this.connection.onReducer("despawn_expired_items", callback);
  }

  removeOnDespawnExpiredItems(callback: (ctx: ReducerEventContext, schedule: DroppedItemDespawnSchedule) => void) {
    this.connection.offReducer("despawn_expired_items", callback);
  }

  dropItem(itemInstanceId: bigint, quantityToDrop: number) {
    const __args = { itemInstanceId, quantityToDrop };
    let __writer = new BinaryWriter(1024);
    DropItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item", __argsBuffer, this.setCallReducerFlags.dropItemFlags);
  }

  onDropItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, quantityToDrop: number) => void) {
    this.connection.onReducer("drop_item", callback);
  }

  removeOnDropItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, quantityToDrop: number) => void) {
    this.connection.offReducer("drop_item", callback);
  }

  equipArmor(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    EquipArmor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_armor", __argsBuffer, this.setCallReducerFlags.equipArmorFlags);
  }

  onEquipArmor(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("equip_armor", callback);
  }

  removeOnEquipArmor(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("equip_armor", callback);
  }

  equipArmorFromDrag(itemInstanceId: bigint, targetSlotName: string) {
    const __args = { itemInstanceId, targetSlotName };
    let __writer = new BinaryWriter(1024);
    EquipArmorFromDrag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_armor_from_drag", __argsBuffer, this.setCallReducerFlags.equipArmorFromDragFlags);
  }

  onEquipArmorFromDrag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetSlotName: string) => void) {
    this.connection.onReducer("equip_armor_from_drag", callback);
  }

  removeOnEquipArmorFromDrag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetSlotName: string) => void) {
    this.connection.offReducer("equip_armor_from_drag", callback);
  }

  equipItem(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    EquipItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_item", __argsBuffer, this.setCallReducerFlags.equipItemFlags);
  }

  onEquipItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("equip_item", callback);
  }

  removeOnEquipItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("equip_item", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  interactWithCampfire(campfireId: number) {
    const __args = { campfireId };
    let __writer = new BinaryWriter(1024);
    InteractWithCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_campfire", __argsBuffer, this.setCallReducerFlags.interactWithCampfireFlags);
  }

  onInteractWithCampfire(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.onReducer("interact_with_campfire", callback);
  }

  removeOnInteractWithCampfire(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.offReducer("interact_with_campfire", callback);
  }

  interactWithMushroom(mushroomId: bigint) {
    const __args = { mushroomId };
    let __writer = new BinaryWriter(1024);
    InteractWithMushroom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_mushroom", __argsBuffer, this.setCallReducerFlags.interactWithMushroomFlags);
  }

  onInteractWithMushroom(callback: (ctx: ReducerEventContext, mushroomId: bigint) => void) {
    this.connection.onReducer("interact_with_mushroom", callback);
  }

  removeOnInteractWithMushroom(callback: (ctx: ReducerEventContext, mushroomId: bigint) => void) {
    this.connection.offReducer("interact_with_mushroom", callback);
  }

  jump() {
    this.connection.callReducer("jump", new Uint8Array(0), this.setCallReducerFlags.jumpFlags);
  }

  onJump(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("jump", callback);
  }

  removeOnJump(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("jump", callback);
  }

  moveFuelWithinCampfire(campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveFuelWithinCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_fuel_within_campfire", __argsBuffer, this.setCallReducerFlags.moveFuelWithinCampfireFlags);
  }

  onMoveFuelWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_fuel_within_campfire", callback);
  }

  removeOnMoveFuelWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_fuel_within_campfire", callback);
  }

  moveItemToHotbar(itemInstanceId: bigint, targetHotbarSlot: number) {
    const __args = { itemInstanceId, targetHotbarSlot };
    let __writer = new BinaryWriter(1024);
    MoveItemToHotbar.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_hotbar", __argsBuffer, this.setCallReducerFlags.moveItemToHotbarFlags);
  }

  onMoveItemToHotbar(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetHotbarSlot: number) => void) {
    this.connection.onReducer("move_item_to_hotbar", callback);
  }

  removeOnMoveItemToHotbar(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetHotbarSlot: number) => void) {
    this.connection.offReducer("move_item_to_hotbar", callback);
  }

  moveItemToInventory(itemInstanceId: bigint, targetInventorySlot: number) {
    const __args = { itemInstanceId, targetInventorySlot };
    let __writer = new BinaryWriter(1024);
    MoveItemToInventory.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_inventory", __argsBuffer, this.setCallReducerFlags.moveItemToInventoryFlags);
  }

  onMoveItemToInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetInventorySlot: number) => void) {
    this.connection.onReducer("move_item_to_inventory", callback);
  }

  removeOnMoveItemToInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetInventorySlot: number) => void) {
    this.connection.offReducer("move_item_to_inventory", callback);
  }

  moveToFirstAvailableHotbarSlot(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    MoveToFirstAvailableHotbarSlot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_to_first_available_hotbar_slot", __argsBuffer, this.setCallReducerFlags.moveToFirstAvailableHotbarSlotFlags);
  }

  onMoveToFirstAvailableHotbarSlot(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("move_to_first_available_hotbar_slot", callback);
  }

  removeOnMoveToFirstAvailableHotbarSlot(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("move_to_first_available_hotbar_slot", callback);
  }

  pickupDroppedItem(droppedItemId: bigint) {
    const __args = { droppedItemId };
    let __writer = new BinaryWriter(1024);
    PickupDroppedItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pickup_dropped_item", __argsBuffer, this.setCallReducerFlags.pickupDroppedItemFlags);
  }

  onPickupDroppedItem(callback: (ctx: ReducerEventContext, droppedItemId: bigint) => void) {
    this.connection.onReducer("pickup_dropped_item", callback);
  }

  removeOnPickupDroppedItem(callback: (ctx: ReducerEventContext, droppedItemId: bigint) => void) {
    this.connection.offReducer("pickup_dropped_item", callback);
  }

  placeCampfire(targetX: number, targetY: number) {
    const __args = { targetX, targetY };
    let __writer = new BinaryWriter(1024);
    PlaceCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_campfire", __argsBuffer, this.setCallReducerFlags.placeCampfireFlags);
  }

  onPlaceCampfire(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.onReducer("place_campfire", callback);
  }

  removeOnPlaceCampfire(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.offReducer("place_campfire", callback);
  }

  registerPlayer(username: string) {
    const __args = { username };
    let __writer = new BinaryWriter(1024);
    RegisterPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.offReducer("register_player", callback);
  }

  removeFuelFromCampfire(campfireId: number, sourceSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex };
    let __writer = new BinaryWriter(1024);
    RemoveFuelFromCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("remove_fuel_from_campfire", __argsBuffer, this.setCallReducerFlags.removeFuelFromCampfireFlags);
  }

  onRemoveFuelFromCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number) => void) {
    this.connection.onReducer("remove_fuel_from_campfire", callback);
  }

  removeOnRemoveFuelFromCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number) => void) {
    this.connection.offReducer("remove_fuel_from_campfire", callback);
  }

  requestRespawn() {
    this.connection.callReducer("request_respawn", new Uint8Array(0), this.setCallReducerFlags.requestRespawnFlags);
  }

  onRequestRespawn(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("request_respawn", callback);
  }

  removeOnRequestRespawn(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("request_respawn", callback);
  }

  seedEnvironment() {
    this.connection.callReducer("seed_environment", new Uint8Array(0), this.setCallReducerFlags.seedEnvironmentFlags);
  }

  onSeedEnvironment(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_environment", callback);
  }

  removeOnSeedEnvironment(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_environment", callback);
  }

  seedItems() {
    this.connection.callReducer("seed_items", new Uint8Array(0), this.setCallReducerFlags.seedItemsFlags);
  }

  onSeedItems(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_items", callback);
  }

  removeOnSeedItems(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_items", callback);
  }

  seedWorldState() {
    this.connection.callReducer("seed_world_state", new Uint8Array(0), this.setCallReducerFlags.seedWorldStateFlags);
  }

  onSeedWorldState(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_world_state", callback);
  }

  removeOnSeedWorldState(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_world_state", callback);
  }

  setSprinting(sprinting: boolean) {
    const __args = { sprinting };
    let __writer = new BinaryWriter(1024);
    SetSprinting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_sprinting", __argsBuffer, this.setCallReducerFlags.setSprintingFlags);
  }

  onSetSprinting(callback: (ctx: ReducerEventContext, sprinting: boolean) => void) {
    this.connection.onReducer("set_sprinting", callback);
  }

  removeOnSetSprinting(callback: (ctx: ReducerEventContext, sprinting: boolean) => void) {
    this.connection.offReducer("set_sprinting", callback);
  }

  splitStack(sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { sourceItemInstanceId, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack", __argsBuffer, this.setCallReducerFlags.splitStackFlags);
  }

  onSplitStack(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack", callback);
  }

  removeOnSplitStack(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack", callback);
  }

  splitStackFromCampfire(sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { sourceCampfireId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackFromCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_from_campfire", __argsBuffer, this.setCallReducerFlags.splitStackFromCampfireFlags);
  }

  onSplitStackFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_from_campfire", callback);
  }

  removeOnSplitStackFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_from_campfire", callback);
  }

  splitStackIntoCampfire(sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) {
    const __args = { sourceItemInstanceId, quantityToSplit, targetCampfireId, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackIntoCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_into_campfire", __argsBuffer, this.setCallReducerFlags.splitStackIntoCampfireFlags);
  }

  onSplitStackIntoCampfire(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_into_campfire", callback);
  }

  removeOnSplitStackIntoCampfire(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_into_campfire", callback);
  }

  splitStackWithinCampfire(campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex, quantityToSplit, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackWithinCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_within_campfire", __argsBuffer, this.setCallReducerFlags.splitStackWithinCampfireFlags);
  }

  onSplitStackWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_within_campfire", callback);
  }

  removeOnSplitStackWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_within_campfire", callback);
  }

  tickWorldState(timestamp: Timestamp) {
    const __args = { timestamp };
    let __writer = new BinaryWriter(1024);
    TickWorldState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("tick_world_state", __argsBuffer, this.setCallReducerFlags.tickWorldStateFlags);
  }

  onTickWorldState(callback: (ctx: ReducerEventContext, timestamp: Timestamp) => void) {
    this.connection.onReducer("tick_world_state", callback);
  }

  removeOnTickWorldState(callback: (ctx: ReducerEventContext, timestamp: Timestamp) => void) {
    this.connection.offReducer("tick_world_state", callback);
  }

  toggleCampfireBurning(campfireId: number) {
    const __args = { campfireId };
    let __writer = new BinaryWriter(1024);
    ToggleCampfireBurning.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("toggle_campfire_burning", __argsBuffer, this.setCallReducerFlags.toggleCampfireBurningFlags);
  }

  onToggleCampfireBurning(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.onReducer("toggle_campfire_burning", callback);
  }

  removeOnToggleCampfireBurning(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.offReducer("toggle_campfire_burning", callback);
  }

  unequipItem() {
    this.connection.callReducer("unequip_item", new Uint8Array(0), this.setCallReducerFlags.unequipItemFlags);
  }

  onUnequipItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("unequip_item", callback);
  }

  removeOnUnequipItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("unequip_item", callback);
  }

  updatePlayerPosition(moveDx: number, moveDy: number, intendedDirection: string | undefined) {
    const __args = { moveDx, moveDy, intendedDirection };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_position", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionFlags);
  }

  onUpdatePlayerPosition(callback: (ctx: ReducerEventContext, moveDx: number, moveDy: number, intendedDirection: string | undefined) => void) {
    this.connection.onReducer("update_player_position", callback);
  }

  removeOnUpdatePlayerPosition(callback: (ctx: ReducerEventContext, moveDx: number, moveDy: number, intendedDirection: string | undefined) => void) {
    this.connection.offReducer("update_player_position", callback);
  }

  useEquippedItem() {
    this.connection.callReducer("use_equipped_item", new Uint8Array(0), this.setCallReducerFlags.useEquippedItemFlags);
  }

  onUseEquippedItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("use_equipped_item", callback);
  }

  removeOnUseEquippedItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("use_equipped_item", callback);
  }

}

export class SetReducerFlags {
  addFuelToCampfireFlags: CallReducerFlags = 'FullUpdate';
  addFuelToCampfire(flags: CallReducerFlags) {
    this.addFuelToCampfireFlags = flags;
  }

  addWoodToFirstAvailableCampfireSlotFlags: CallReducerFlags = 'FullUpdate';
  addWoodToFirstAvailableCampfireSlot(flags: CallReducerFlags) {
    this.addWoodToFirstAvailableCampfireSlotFlags = flags;
  }

  checkCampfireFuelConsumptionFlags: CallReducerFlags = 'FullUpdate';
  checkCampfireFuelConsumption(flags: CallReducerFlags) {
    this.checkCampfireFuelConsumptionFlags = flags;
  }

  checkResourceRespawnsFlags: CallReducerFlags = 'FullUpdate';
  checkResourceRespawns(flags: CallReducerFlags) {
    this.checkResourceRespawnsFlags = flags;
  }

  consumeItemFlags: CallReducerFlags = 'FullUpdate';
  consumeItem(flags: CallReducerFlags) {
    this.consumeItemFlags = flags;
  }

  despawnExpiredItemsFlags: CallReducerFlags = 'FullUpdate';
  despawnExpiredItems(flags: CallReducerFlags) {
    this.despawnExpiredItemsFlags = flags;
  }

  dropItemFlags: CallReducerFlags = 'FullUpdate';
  dropItem(flags: CallReducerFlags) {
    this.dropItemFlags = flags;
  }

  equipArmorFlags: CallReducerFlags = 'FullUpdate';
  equipArmor(flags: CallReducerFlags) {
    this.equipArmorFlags = flags;
  }

  equipArmorFromDragFlags: CallReducerFlags = 'FullUpdate';
  equipArmorFromDrag(flags: CallReducerFlags) {
    this.equipArmorFromDragFlags = flags;
  }

  equipItemFlags: CallReducerFlags = 'FullUpdate';
  equipItem(flags: CallReducerFlags) {
    this.equipItemFlags = flags;
  }

  interactWithCampfireFlags: CallReducerFlags = 'FullUpdate';
  interactWithCampfire(flags: CallReducerFlags) {
    this.interactWithCampfireFlags = flags;
  }

  interactWithMushroomFlags: CallReducerFlags = 'FullUpdate';
  interactWithMushroom(flags: CallReducerFlags) {
    this.interactWithMushroomFlags = flags;
  }

  jumpFlags: CallReducerFlags = 'FullUpdate';
  jump(flags: CallReducerFlags) {
    this.jumpFlags = flags;
  }

  moveFuelWithinCampfireFlags: CallReducerFlags = 'FullUpdate';
  moveFuelWithinCampfire(flags: CallReducerFlags) {
    this.moveFuelWithinCampfireFlags = flags;
  }

  moveItemToHotbarFlags: CallReducerFlags = 'FullUpdate';
  moveItemToHotbar(flags: CallReducerFlags) {
    this.moveItemToHotbarFlags = flags;
  }

  moveItemToInventoryFlags: CallReducerFlags = 'FullUpdate';
  moveItemToInventory(flags: CallReducerFlags) {
    this.moveItemToInventoryFlags = flags;
  }

  moveToFirstAvailableHotbarSlotFlags: CallReducerFlags = 'FullUpdate';
  moveToFirstAvailableHotbarSlot(flags: CallReducerFlags) {
    this.moveToFirstAvailableHotbarSlotFlags = flags;
  }

  pickupDroppedItemFlags: CallReducerFlags = 'FullUpdate';
  pickupDroppedItem(flags: CallReducerFlags) {
    this.pickupDroppedItemFlags = flags;
  }

  placeCampfireFlags: CallReducerFlags = 'FullUpdate';
  placeCampfire(flags: CallReducerFlags) {
    this.placeCampfireFlags = flags;
  }

  registerPlayerFlags: CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  removeFuelFromCampfireFlags: CallReducerFlags = 'FullUpdate';
  removeFuelFromCampfire(flags: CallReducerFlags) {
    this.removeFuelFromCampfireFlags = flags;
  }

  requestRespawnFlags: CallReducerFlags = 'FullUpdate';
  requestRespawn(flags: CallReducerFlags) {
    this.requestRespawnFlags = flags;
  }

  seedEnvironmentFlags: CallReducerFlags = 'FullUpdate';
  seedEnvironment(flags: CallReducerFlags) {
    this.seedEnvironmentFlags = flags;
  }

  seedItemsFlags: CallReducerFlags = 'FullUpdate';
  seedItems(flags: CallReducerFlags) {
    this.seedItemsFlags = flags;
  }

  seedWorldStateFlags: CallReducerFlags = 'FullUpdate';
  seedWorldState(flags: CallReducerFlags) {
    this.seedWorldStateFlags = flags;
  }

  setSprintingFlags: CallReducerFlags = 'FullUpdate';
  setSprinting(flags: CallReducerFlags) {
    this.setSprintingFlags = flags;
  }

  splitStackFlags: CallReducerFlags = 'FullUpdate';
  splitStack(flags: CallReducerFlags) {
    this.splitStackFlags = flags;
  }

  splitStackFromCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackFromCampfire(flags: CallReducerFlags) {
    this.splitStackFromCampfireFlags = flags;
  }

  splitStackIntoCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackIntoCampfire(flags: CallReducerFlags) {
    this.splitStackIntoCampfireFlags = flags;
  }

  splitStackWithinCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackWithinCampfire(flags: CallReducerFlags) {
    this.splitStackWithinCampfireFlags = flags;
  }

  tickWorldStateFlags: CallReducerFlags = 'FullUpdate';
  tickWorldState(flags: CallReducerFlags) {
    this.tickWorldStateFlags = flags;
  }

  toggleCampfireBurningFlags: CallReducerFlags = 'FullUpdate';
  toggleCampfireBurning(flags: CallReducerFlags) {
    this.toggleCampfireBurningFlags = flags;
  }

  unequipItemFlags: CallReducerFlags = 'FullUpdate';
  unequipItem(flags: CallReducerFlags) {
    this.unequipItemFlags = flags;
  }

  updatePlayerPositionFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPosition(flags: CallReducerFlags) {
    this.updatePlayerPositionFlags = flags;
  }

  useEquippedItemFlags: CallReducerFlags = 'FullUpdate';
  useEquippedItem(flags: CallReducerFlags) {
    this.useEquippedItemFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get activeEquipment(): ActiveEquipmentTableHandle {
    return new ActiveEquipmentTableHandle(this.connection.clientCache.getOrCreateTable<ActiveEquipment>(REMOTE_MODULE.tables.active_equipment));
  }

  get campfire(): CampfireTableHandle {
    return new CampfireTableHandle(this.connection.clientCache.getOrCreateTable<Campfire>(REMOTE_MODULE.tables.campfire));
  }

  get campfireFuelCheckSchedule(): CampfireFuelCheckScheduleTableHandle {
    return new CampfireFuelCheckScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CampfireFuelCheckSchedule>(REMOTE_MODULE.tables.campfire_fuel_check_schedule));
  }

  get droppedItem(): DroppedItemTableHandle {
    return new DroppedItemTableHandle(this.connection.clientCache.getOrCreateTable<DroppedItem>(REMOTE_MODULE.tables.dropped_item));
  }

  get droppedItemDespawnSchedule(): DroppedItemDespawnScheduleTableHandle {
    return new DroppedItemDespawnScheduleTableHandle(this.connection.clientCache.getOrCreateTable<DroppedItemDespawnSchedule>(REMOTE_MODULE.tables.dropped_item_despawn_schedule));
  }

  get inventoryItem(): InventoryItemTableHandle {
    return new InventoryItemTableHandle(this.connection.clientCache.getOrCreateTable<InventoryItem>(REMOTE_MODULE.tables.inventory_item));
  }

  get itemDefinition(): ItemDefinitionTableHandle {
    return new ItemDefinitionTableHandle(this.connection.clientCache.getOrCreateTable<ItemDefinition>(REMOTE_MODULE.tables.item_definition));
  }

  get mushroom(): MushroomTableHandle {
    return new MushroomTableHandle(this.connection.clientCache.getOrCreateTable<Mushroom>(REMOTE_MODULE.tables.mushroom));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get stone(): StoneTableHandle {
    return new StoneTableHandle(this.connection.clientCache.getOrCreateTable<Stone>(REMOTE_MODULE.tables.stone));
  }

  get tree(): TreeTableHandle {
    return new TreeTableHandle(this.connection.clientCache.getOrCreateTable<Tree>(REMOTE_MODULE.tables.tree));
  }

  get worldState(): WorldStateTableHandle {
    return new WorldStateTableHandle(this.connection.clientCache.getOrCreateTable<WorldState>(REMOTE_MODULE.tables.world_state));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
