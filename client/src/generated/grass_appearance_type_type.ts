// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace GrassAppearanceType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type PatchA = { tag: "PatchA" };
  export type PatchB = { tag: "PatchB" };
  export type PatchC = { tag: "PatchC" };
  export type TallGrassA = { tag: "TallGrassA" };
  export type TallGrassB = { tag: "TallGrassB" };
  export type BushRounded = { tag: "BushRounded" };
  export type BushSpiky = { tag: "BushSpiky" };
  export type BushFlowering = { tag: "BushFlowering" };
  export type BramblesA = { tag: "BramblesA" };
  export type BramblesB = { tag: "BramblesB" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const PatchA = { tag: "PatchA" };
  export const PatchB = { tag: "PatchB" };
  export const PatchC = { tag: "PatchC" };
  export const TallGrassA = { tag: "TallGrassA" };
  export const TallGrassB = { tag: "TallGrassB" };
  export const BushRounded = { tag: "BushRounded" };
  export const BushSpiky = { tag: "BushSpiky" };
  export const BushFlowering = { tag: "BushFlowering" };
  export const BramblesA = { tag: "BramblesA" };
  export const BramblesB = { tag: "BramblesB" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("PatchA", AlgebraicType.createProductType([])),
      new SumTypeVariant("PatchB", AlgebraicType.createProductType([])),
      new SumTypeVariant("PatchC", AlgebraicType.createProductType([])),
      new SumTypeVariant("TallGrassA", AlgebraicType.createProductType([])),
      new SumTypeVariant("TallGrassB", AlgebraicType.createProductType([])),
      new SumTypeVariant("BushRounded", AlgebraicType.createProductType([])),
      new SumTypeVariant("BushSpiky", AlgebraicType.createProductType([])),
      new SumTypeVariant("BushFlowering", AlgebraicType.createProductType([])),
      new SumTypeVariant("BramblesA", AlgebraicType.createProductType([])),
      new SumTypeVariant("BramblesB", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: GrassAppearanceType): void {
      GrassAppearanceType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): GrassAppearanceType {
      return GrassAppearanceType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `GrassAppearanceType`.
export type GrassAppearanceType = GrassAppearanceType.PatchA | GrassAppearanceType.PatchB | GrassAppearanceType.PatchC | GrassAppearanceType.TallGrassA | GrassAppearanceType.TallGrassB | GrassAppearanceType.BushRounded | GrassAppearanceType.BushSpiky | GrassAppearanceType.BushFlowering | GrassAppearanceType.BramblesA | GrassAppearanceType.BramblesB;

export default GrassAppearanceType;

